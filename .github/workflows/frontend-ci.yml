name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'

env:
  NODE_VERSION: '18'

jobs:
  # Test Job
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npm run type-check

    - name: Run tests
      run: npm run test:ci
      env:
        CI: true

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        flags: frontend
        name: frontend-coverage

  # Lint Job
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run Prettier check
      run: npm run format:check

  # Build Job
  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        CI: true
        GENERATE_SOURCEMAP: false

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/
        retention-days: 7

  # Security Audit
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Run dependency check
      run: npx audit-ci --config audit-ci.json

  # Performance Tests
  lighthouse:
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: dist/

    - name: Serve built app
      run: |
        npm install -g serve
        serve -s dist -l 3000 &
        sleep 5

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: dist/

    - name: Deploy to Surge.sh (Staging)
      run: |
        npm install -g surge
        surge ./dist ${{ secrets.SURGE_STAGING_DOMAIN }} --token ${{ secrets.SURGE_TOKEN }}

    - name: Comment PR with staging URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üöÄ Staging deployment: https://${{ secrets.SURGE_STAGING_DOMAIN }}'
          })

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security, lighthouse]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: dist/

    - name: Deploy to Surge.sh (Production)
      run: |
        npm install -g surge
        surge ./dist ${{ secrets.SURGE_PRODUCTION_DOMAIN }} --token ${{ secrets.SURGE_TOKEN }}

    - name: Update domain CNAME
      run: |
        echo "www.flowsyai.com" > dist/CNAME
        surge ./dist www.flowsyai.com --token ${{ secrets.SURGE_TOKEN }}

  # Notify
  notify:
    runs-on: ubuntu-latest
    needs: [test, lint, build, security]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.lint.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "‚úÖ Frontend pipeline completed successfully!"

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "‚ùå Frontend pipeline failed!"
